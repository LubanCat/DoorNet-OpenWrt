--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -112,6 +112,11 @@ static void stmmac_exit_fs(struct net_de
 
 #define STMMAC_COAL_TIMER(x) (jiffies + usecs_to_jiffies(x))
 
+#define RTL_8211E_PHY_ID  0x001cc915
+#define RTL_8211F_PHY_ID  0x001cc916
+#define YT_8531C_PHY_ID   0x4f51e91b
+#define JL_2101_PHY_ID    0x937c4032
+
 /**
  * stmmac_verify_args - verify the driver parameters.
  * Description: it checks the driver parameters and set a default in case of
@@ -4433,6 +4438,95 @@ static int stmmac_hw_init(struct stmmac_
 	return 0;
 }
 
+static int phy_rtl8211e_led_fixup(struct phy_device *phydev)
+{
+        int val;
+
+        printk("%s in\n", __func__);
+
+        /*switch to extension page44*/
+        phy_write(phydev, 31, 0x07);
+        phy_write(phydev, 30, 0x2c);
+
+        /*set led1(yellow) act*/
+        val = phy_read(phydev, 26);
+        val &= (~(1<<4));// bit4=0
+        val |= (1<<5);// bit5=1
+        val &= (~(1<<6));// bit6=0
+        phy_write(phydev, 26, val);
+
+        /*set led0(green) link*/
+        val = phy_read(phydev, 28);
+        val |= (7<<0);// bit0,1,2=1
+        val &= (~(7<<4));// bit4,5,6=0
+        val &= (~(7<<8));// bit8,9,10=0
+        phy_write(phydev, 28, val);
+
+        /*switch back to page0*/
+        phy_write(phydev,31,0x00);
+
+        return 0;
+}
+
+static int phy_rtl8211f_led_fixup(struct phy_device *phydev)
+{
+        int val;
+
+        printk("%s in\n", __func__);
+
+        /*switch to extension page 0xd04*/
+        phy_write(phydev, 0x1f, 0xd04);
+
+		/* led2(green)10/100/1000M  led1(yello)active */
+        val = 0x2f60;
+        phy_write(phydev, 0x10, val);
+
+		/* EEE led control */
+        val = 0x0;
+        phy_write(phydev, 0x11, val);
+        /*switch back to page0*/
+        phy_write(phydev,0x1f,0x00);
+
+        return 0;
+}
+
+static int phy_yt8531_led_fixup(struct phy_device *phydev)
+{
+        printk("%s in\n", __func__);
+        phy_write(phydev, 0x1e, 0xa00d);
+        phy_write(phydev, 0x1f, 0x670);
+
+        phy_write(phydev, 0x1e, 0xa00e);
+        phy_write(phydev, 0x1f, 0x2070);
+
+        phy_write(phydev, 0x1e, 0xa00f);
+        phy_write(phydev, 0x1f, 0x7e);
+
+        return 0;
+}
+
+static int phy_jl2101_led_fixup(struct phy_device *phydev)
+{
+        int val;
+
+        printk("%s in\n", __func__);
+
+        /*switch to extension page 0xd04*/
+        phy_write(phydev, 0x1f, 0xd04);
+
+		/* led2(green)10/100/1000M  led1(yello)active */
+        val = 0x2f60;
+        phy_write(phydev, 0x10, val);
+
+		/* EEE led control */
+        val = 0x0;
+        phy_write(phydev, 0x11, val);
+        /*switch back to page0*/
+        phy_write(phydev,0x1f,0x00);
+
+        return 0;
+}
+
 /**
  * stmmac_dvr_probe
  * @device: device pointer
@@ -4657,6 +4751,20 @@ int stmmac_dvr_probe(struct device *devi
 		netdev_err(ndev, "failed to setup phy (%d)\n", ret);
 		goto error_phy_setup;
 	}
+	/* register the PHY board fixup */
+        ret = phy_register_fixup_for_uid(RTL_8211E_PHY_ID, 0xffffffff, phy_rtl8211e_led_fixup);
+        if (ret)
+                pr_warn("Cannot register PHY board fixup.\n");
+        ret = phy_register_fixup_for_uid(RTL_8211F_PHY_ID, 0xffffffff, phy_rtl8211f_led_fixup);
+        if (ret)
+                pr_warn("Cannot register PHY board fixup.\n");
+        ret = phy_register_fixup_for_uid(YT_8531C_PHY_ID, 0xffffffff, phy_yt8531_led_fixup);
+        if (ret)
+                pr_warn("Cannot register PHY board fixup.\n");
+        ret = phy_register_fixup_for_uid(JL_2101_PHY_ID, 0xffffffff, phy_jl2101_led_fixup);
+        if (ret)
+                pr_warn("Cannot register PHY board fixup.\n");
+
 
 	ret = register_netdev(ndev);
 	if (ret) {
